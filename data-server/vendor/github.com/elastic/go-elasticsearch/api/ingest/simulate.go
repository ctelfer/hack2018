// generated by github.com/elastic/go-elasticsearch/cmd/generator; DO NOT EDIT

package ingest

import (
	"net/http"

	"github.com/elastic/go-elasticsearch/transport"
	"github.com/elastic/go-elasticsearch/util"
)

// SimulateOption is a non-required Simulate option that gets applied to an HTTP request.
type SimulateOption func(r *transport.Request)

// WithSimulateID - pipeline ID.
func WithSimulateID(id string) SimulateOption {
	return func(r *transport.Request) {
	}
}

// WithSimulateVerbose - verbose mode. Display data output for each processor in executed pipeline.
func WithSimulateVerbose(verbose bool) SimulateOption {
	return func(r *transport.Request) {
	}
}

// WithSimulateErrorTrace - include the stack trace of returned errors.
func WithSimulateErrorTrace(errorTrace bool) SimulateOption {
	return func(r *transport.Request) {
	}
}

// WithSimulateFilterPath - a comma-separated list of filters used to reduce the respone.
func WithSimulateFilterPath(filterPath []string) SimulateOption {
	return func(r *transport.Request) {
	}
}

// WithSimulateHuman - return human readable values for statistics.
func WithSimulateHuman(human bool) SimulateOption {
	return func(r *transport.Request) {
	}
}

// WithSimulateIgnore - ignores the specified HTTP status codes.
func WithSimulateIgnore(ignore []int) SimulateOption {
	return func(r *transport.Request) {
	}
}

// WithSimulatePretty - pretty format the returned JSON response.
func WithSimulatePretty(pretty bool) SimulateOption {
	return func(r *transport.Request) {
	}
}

// WithSimulateSourceParam - the URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
func WithSimulateSourceParam(sourceParam string) SimulateOption {
	return func(r *transport.Request) {
	}
}

// Simulate - the ingest plugins extend Elasticsearch by providing additional ingest node capabilities. See https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/ingest.html for more info.
//
// body: the simulate definition.
//
// options: optional parameters.
func (i *Ingest) Simulate(body map[string]interface{}, options ...SimulateOption) (*SimulateResponse, error) {
	req := i.transport.NewRequest("GET")
	for _, option := range options {
		option(req)
	}
	resp, err := i.transport.Do(req)
	return &SimulateResponse{resp}, err
}

// SimulateResponse is the response for Simulate.
type SimulateResponse struct {
	Response *http.Response
	// TODO: fill in structured response
}

// DecodeBody decodes the JSON body of the HTTP response.
func (r *SimulateResponse) DecodeBody() (util.MapStr, error) {
	return transport.DecodeResponseBody(r.Response)
}
