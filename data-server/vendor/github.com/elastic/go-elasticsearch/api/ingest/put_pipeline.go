// generated by github.com/elastic/go-elasticsearch/cmd/generator; DO NOT EDIT

package ingest

import (
	"net/http"
	"time"

	"github.com/elastic/go-elasticsearch/transport"
	"github.com/elastic/go-elasticsearch/util"
)

// PutPipelineOption is a non-required PutPipeline option that gets applied to an HTTP request.
type PutPipelineOption func(r *transport.Request)

// WithPutPipelineMasterTimeout - explicit operation timeout for connection to master node.
func WithPutPipelineMasterTimeout(masterTimeout time.Duration) PutPipelineOption {
	return func(r *transport.Request) {
	}
}

// WithPutPipelineTimeout - explicit operation timeout.
func WithPutPipelineTimeout(timeout time.Duration) PutPipelineOption {
	return func(r *transport.Request) {
	}
}

// WithPutPipelineErrorTrace - include the stack trace of returned errors.
func WithPutPipelineErrorTrace(errorTrace bool) PutPipelineOption {
	return func(r *transport.Request) {
	}
}

// WithPutPipelineFilterPath - a comma-separated list of filters used to reduce the respone.
func WithPutPipelineFilterPath(filterPath []string) PutPipelineOption {
	return func(r *transport.Request) {
	}
}

// WithPutPipelineHuman - return human readable values for statistics.
func WithPutPipelineHuman(human bool) PutPipelineOption {
	return func(r *transport.Request) {
	}
}

// WithPutPipelineIgnore - ignores the specified HTTP status codes.
func WithPutPipelineIgnore(ignore []int) PutPipelineOption {
	return func(r *transport.Request) {
	}
}

// WithPutPipelinePretty - pretty format the returned JSON response.
func WithPutPipelinePretty(pretty bool) PutPipelineOption {
	return func(r *transport.Request) {
	}
}

// WithPutPipelineSourceParam - the URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
func WithPutPipelineSourceParam(sourceParam string) PutPipelineOption {
	return func(r *transport.Request) {
	}
}

// PutPipeline - the ingest plugins extend Elasticsearch by providing additional ingest node capabilities. See https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/ingest.html for more info.
//
// id: pipeline ID.
//
// body: the ingest definition.
//
// options: optional parameters.
func (i *Ingest) PutPipeline(id string, body map[string]interface{}, options ...PutPipelineOption) (*PutPipelineResponse, error) {
	req := i.transport.NewRequest("PUT")
	for _, option := range options {
		option(req)
	}
	resp, err := i.transport.Do(req)
	return &PutPipelineResponse{resp}, err
}

// PutPipelineResponse is the response for PutPipeline.
type PutPipelineResponse struct {
	Response *http.Response
	// TODO: fill in structured response
}

// DecodeBody decodes the JSON body of the HTTP response.
func (r *PutPipelineResponse) DecodeBody() (util.MapStr, error) {
	return transport.DecodeResponseBody(r.Response)
}
