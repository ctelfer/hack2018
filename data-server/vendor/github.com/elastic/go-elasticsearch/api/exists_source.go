// generated by github.com/elastic/go-elasticsearch/cmd/generator; DO NOT EDIT

package api

import (
	"net/http"

	"github.com/elastic/go-elasticsearch/transport"
	"github.com/elastic/go-elasticsearch/util"
)

// ExistsSourceOption is a non-required ExistsSource option that gets applied to an HTTP request.
type ExistsSourceOption func(r *transport.Request)

// WithExistsSourceSource - true or false to return the _source field or not, or a list of fields to return.
func WithExistsSourceSource(source []string) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// WithExistsSourceSourceExclude - a list of fields to exclude from the returned _source field.
func WithExistsSourceSourceExclude(sourceExclude []string) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// WithExistsSourceSourceInclude - a list of fields to extract and return from the _source field.
func WithExistsSourceSourceInclude(sourceInclude []string) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// WithExistsSourceParent - the ID of the parent document.
func WithExistsSourceParent(parent string) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// WithExistsSourcePreference - specify the node or shard the operation should be performed on (default: random).
func WithExistsSourcePreference(preference string) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// WithExistsSourceRealtime - specify whether to perform the operation in realtime or search mode.
func WithExistsSourceRealtime(realtime bool) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// WithExistsSourceRefresh - refresh the shard containing the document before performing the operation.
func WithExistsSourceRefresh(refresh bool) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// WithExistsSourceRouting - specific routing value.
func WithExistsSourceRouting(routing string) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// WithExistsSourceVersion - explicit version number for concurrency control.
func WithExistsSourceVersion(version int) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// ExistsSourceVersionType - specific version type.
type ExistsSourceVersionType int

const (
	// ExistsSourceVersionTypeInternal can be used to set ExistsSourceVersionType to "internal"
	ExistsSourceVersionTypeInternal = iota
	// ExistsSourceVersionTypeExternal can be used to set ExistsSourceVersionType to "external"
	ExistsSourceVersionTypeExternal = iota
	// ExistsSourceVersionTypeExternalGte can be used to set ExistsSourceVersionType to "external_gte"
	ExistsSourceVersionTypeExternalGte = iota
	// ExistsSourceVersionTypeForce can be used to set ExistsSourceVersionType to "force"
	ExistsSourceVersionTypeForce = iota
)

// WithExistsSourceVersionType - specific version type.
func WithExistsSourceVersionType(versionType ExistsSourceVersionType) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// WithExistsSourceErrorTrace - include the stack trace of returned errors.
func WithExistsSourceErrorTrace(errorTrace bool) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// WithExistsSourceFilterPath - a comma-separated list of filters used to reduce the respone.
func WithExistsSourceFilterPath(filterPath []string) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// WithExistsSourceHuman - return human readable values for statistics.
func WithExistsSourceHuman(human bool) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// WithExistsSourceIgnore - ignores the specified HTTP status codes.
func WithExistsSourceIgnore(ignore []int) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// WithExistsSourcePretty - pretty format the returned JSON response.
func WithExistsSourcePretty(pretty bool) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// WithExistsSourceSourceParam - the URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
func WithExistsSourceSourceParam(sourceParam string) ExistsSourceOption {
	return func(r *transport.Request) {
	}
}

// ExistsSource - the get API allows to get a typed JSON document from the index based on its id. See http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html for more info.
//
// index: the name of the index.
//
// documentType: the type of the document; use "_all" to fetch the first document matching the ID across all types.
//
// id: the document ID.
//
// options: optional parameters.
func (a *API) ExistsSource(index string, documentType string, id string, options ...ExistsSourceOption) (*ExistsSourceResponse, error) {
	req := a.transport.NewRequest("HEAD")
	for _, option := range options {
		option(req)
	}
	resp, err := a.transport.Do(req)
	return &ExistsSourceResponse{resp}, err
}

// ExistsSourceResponse is the response for ExistsSource.
type ExistsSourceResponse struct {
	Response *http.Response
	// TODO: fill in structured response
}

// DecodeBody decodes the JSON body of the HTTP response.
func (r *ExistsSourceResponse) DecodeBody() (util.MapStr, error) {
	return transport.DecodeResponseBody(r.Response)
}
