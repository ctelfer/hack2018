// generated by github.com/elastic/go-elasticsearch/cmd/generator; DO NOT EDIT

package api

import (
	"net/http"

	"github.com/elastic/go-elasticsearch/transport"
	"github.com/elastic/go-elasticsearch/util"
)

// GetTemplateOption is a non-required GetTemplate option that gets applied to an HTTP request.
type GetTemplateOption func(r *transport.Request)

// WithGetTemplateErrorTrace - include the stack trace of returned errors.
func WithGetTemplateErrorTrace(errorTrace bool) GetTemplateOption {
	return func(r *transport.Request) {
	}
}

// WithGetTemplateFilterPath - a comma-separated list of filters used to reduce the respone.
func WithGetTemplateFilterPath(filterPath []string) GetTemplateOption {
	return func(r *transport.Request) {
	}
}

// WithGetTemplateHuman - return human readable values for statistics.
func WithGetTemplateHuman(human bool) GetTemplateOption {
	return func(r *transport.Request) {
	}
}

// WithGetTemplateIgnore - ignores the specified HTTP status codes.
func WithGetTemplateIgnore(ignore []int) GetTemplateOption {
	return func(r *transport.Request) {
	}
}

// WithGetTemplatePretty - pretty format the returned JSON response.
func WithGetTemplatePretty(pretty bool) GetTemplateOption {
	return func(r *transport.Request) {
	}
}

// WithGetTemplateSourceParam - the URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
func WithGetTemplateSourceParam(sourceParam string) GetTemplateOption {
	return func(r *transport.Request) {
	}
}

// GetTemplate - see https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-template.html for more info.
//
// id: template ID.
//
// options: optional parameters.
func (a *API) GetTemplate(id string, options ...GetTemplateOption) (*GetTemplateResponse, error) {
	req := a.transport.NewRequest("GET")
	for _, option := range options {
		option(req)
	}
	resp, err := a.transport.Do(req)
	return &GetTemplateResponse{resp}, err
}

// GetTemplateResponse is the response for GetTemplate.
type GetTemplateResponse struct {
	Response *http.Response
	// TODO: fill in structured response
}

// DecodeBody decodes the JSON body of the HTTP response.
func (r *GetTemplateResponse) DecodeBody() (util.MapStr, error) {
	return transport.DecodeResponseBody(r.Response)
}
