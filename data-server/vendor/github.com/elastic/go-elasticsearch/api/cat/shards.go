// generated by github.com/elastic/go-elasticsearch/cmd/generator; DO NOT EDIT

package cat

import (
	"net/http"
	"time"

	"github.com/elastic/go-elasticsearch/transport"
	"github.com/elastic/go-elasticsearch/util"
)

// ShardsOption is a non-required Shards option that gets applied to an HTTP request.
type ShardsOption func(r *transport.Request)

// WithShardsIndex - a comma-separated list of index names to limit the returned information.
func WithShardsIndex(index []string) ShardsOption {
	return func(r *transport.Request) {
	}
}

// WithShardsFormat - a short version of the Accept header, e.g. json, yaml.
func WithShardsFormat(format string) ShardsOption {
	return func(r *transport.Request) {
	}
}

// WithShardsH - comma-separated list of column names to display.
func WithShardsH(h []string) ShardsOption {
	return func(r *transport.Request) {
	}
}

// WithShardsHelp - return help information.
func WithShardsHelp(help bool) ShardsOption {
	return func(r *transport.Request) {
	}
}

// WithShardsLocal - return local information, do not retrieve the state from master node (default: false).
func WithShardsLocal(local bool) ShardsOption {
	return func(r *transport.Request) {
	}
}

// WithShardsMasterTimeout - explicit operation timeout for connection to master node.
func WithShardsMasterTimeout(masterTimeout time.Duration) ShardsOption {
	return func(r *transport.Request) {
	}
}

// WithShardsS - comma-separated list of column names or column aliases to sort by.
func WithShardsS(s []string) ShardsOption {
	return func(r *transport.Request) {
	}
}

// WithShardsV - verbose mode. Display column headers.
func WithShardsV(v bool) ShardsOption {
	return func(r *transport.Request) {
	}
}

// WithShardsErrorTrace - include the stack trace of returned errors.
func WithShardsErrorTrace(errorTrace bool) ShardsOption {
	return func(r *transport.Request) {
	}
}

// WithShardsFilterPath - a comma-separated list of filters used to reduce the respone.
func WithShardsFilterPath(filterPath []string) ShardsOption {
	return func(r *transport.Request) {
	}
}

// WithShardsHuman - return human readable values for statistics.
func WithShardsHuman(human bool) ShardsOption {
	return func(r *transport.Request) {
	}
}

// WithShardsIgnore - ignores the specified HTTP status codes.
func WithShardsIgnore(ignore []int) ShardsOption {
	return func(r *transport.Request) {
	}
}

// WithShardsPretty - pretty format the returned JSON response.
func WithShardsPretty(pretty bool) ShardsOption {
	return func(r *transport.Request) {
	}
}

// WithShardsSourceParam - the URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
func WithShardsSourceParam(sourceParam string) ShardsOption {
	return func(r *transport.Request) {
	}
}

// Shards - see https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-shards.html for more info.
//
// options: optional parameters.
func (c *Cat) Shards(options ...ShardsOption) (*ShardsResponse, error) {
	req := c.transport.NewRequest("GET")
	for _, option := range options {
		option(req)
	}
	resp, err := c.transport.Do(req)
	return &ShardsResponse{resp}, err
}

// ShardsResponse is the response for Shards.
type ShardsResponse struct {
	Response *http.Response
	// TODO: fill in structured response
}

// DecodeBody decodes the JSON body of the HTTP response.
func (r *ShardsResponse) DecodeBody() (util.MapStr, error) {
	return transport.DecodeResponseBody(r.Response)
}
