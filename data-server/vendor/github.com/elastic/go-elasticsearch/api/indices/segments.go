// generated by github.com/elastic/go-elasticsearch/cmd/generator; DO NOT EDIT

package indices

import (
	"net/http"

	"github.com/elastic/go-elasticsearch/transport"
	"github.com/elastic/go-elasticsearch/util"
)

// SegmentsOption is a non-required Segments option that gets applied to an HTTP request.
type SegmentsOption func(r *transport.Request)

// WithSegmentsIndex - a comma-separated list of index names; use "_all" or empty string to perform the operation on all indices.
func WithSegmentsIndex(index []string) SegmentsOption {
	return func(r *transport.Request) {
	}
}

// WithSegmentsAllowNoIndices - whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes "_all" string or when no indices have been specified).
func WithSegmentsAllowNoIndices(allowNoIndices bool) SegmentsOption {
	return func(r *transport.Request) {
	}
}

// SegmentsExpandWildcards - whether to expand wildcard expression to concrete indices that are open, closed or both.
type SegmentsExpandWildcards int

const (
	// SegmentsExpandWildcardsOpen can be used to set SegmentsExpandWildcards to "open"
	SegmentsExpandWildcardsOpen = iota
	// SegmentsExpandWildcardsClosed can be used to set SegmentsExpandWildcards to "closed"
	SegmentsExpandWildcardsClosed = iota
	// SegmentsExpandWildcardsNone can be used to set SegmentsExpandWildcards to "none"
	SegmentsExpandWildcardsNone = iota
	// SegmentsExpandWildcardsAll can be used to set SegmentsExpandWildcards to "all"
	SegmentsExpandWildcardsAll = iota
)

// WithSegmentsExpandWildcards - whether to expand wildcard expression to concrete indices that are open, closed or both.
func WithSegmentsExpandWildcards(expandWildcards SegmentsExpandWildcards) SegmentsOption {
	return func(r *transport.Request) {
	}
}

// WithSegmentsIgnoreUnavailable - whether specified concrete indices should be ignored when unavailable (missing or closed).
func WithSegmentsIgnoreUnavailable(ignoreUnavailable bool) SegmentsOption {
	return func(r *transport.Request) {
	}
}

// WithSegmentsVerbose - includes detailed memory usage by Lucene.
func WithSegmentsVerbose(verbose bool) SegmentsOption {
	return func(r *transport.Request) {
	}
}

// WithSegmentsErrorTrace - include the stack trace of returned errors.
func WithSegmentsErrorTrace(errorTrace bool) SegmentsOption {
	return func(r *transport.Request) {
	}
}

// WithSegmentsFilterPath - a comma-separated list of filters used to reduce the respone.
func WithSegmentsFilterPath(filterPath []string) SegmentsOption {
	return func(r *transport.Request) {
	}
}

// WithSegmentsHuman - return human readable values for statistics.
func WithSegmentsHuman(human bool) SegmentsOption {
	return func(r *transport.Request) {
	}
}

// WithSegmentsIgnore - ignores the specified HTTP status codes.
func WithSegmentsIgnore(ignore []int) SegmentsOption {
	return func(r *transport.Request) {
	}
}

// WithSegmentsPretty - pretty format the returned JSON response.
func WithSegmentsPretty(pretty bool) SegmentsOption {
	return func(r *transport.Request) {
	}
}

// WithSegmentsSourceParam - the URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
func WithSegmentsSourceParam(sourceParam string) SegmentsOption {
	return func(r *transport.Request) {
	}
}

// Segments - provide low level segments information that a Lucene index (shard level) is built with. See https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-segments.html for more info.
//
// options: optional parameters.
func (i *Indices) Segments(options ...SegmentsOption) (*SegmentsResponse, error) {
	req := i.transport.NewRequest("GET")
	for _, option := range options {
		option(req)
	}
	resp, err := i.transport.Do(req)
	return &SegmentsResponse{resp}, err
}

// SegmentsResponse is the response for Segments.
type SegmentsResponse struct {
	Response *http.Response
	// TODO: fill in structured response
}

// DecodeBody decodes the JSON body of the HTTP response.
func (r *SegmentsResponse) DecodeBody() (util.MapStr, error) {
	return transport.DecodeResponseBody(r.Response)
}
