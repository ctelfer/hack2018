// generated by github.com/elastic/go-elasticsearch/cmd/generator; DO NOT EDIT

package indices

import (
	"net/http"
	"time"

	"github.com/elastic/go-elasticsearch/transport"
	"github.com/elastic/go-elasticsearch/util"
)

// PutMappingOption is a non-required PutMapping option that gets applied to an HTTP request.
type PutMappingOption func(r *transport.Request)

// WithPutMappingIndex - a comma-separated list of index names the mapping should be added to (supports wildcards); use "_all" or omit to add the mapping on all indices.
func WithPutMappingIndex(index []string) PutMappingOption {
	return func(r *transport.Request) {
	}
}

// WithPutMappingAllowNoIndices - whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes "_all" string or when no indices have been specified).
func WithPutMappingAllowNoIndices(allowNoIndices bool) PutMappingOption {
	return func(r *transport.Request) {
	}
}

// PutMappingExpandWildcards - whether to expand wildcard expression to concrete indices that are open, closed or both.
type PutMappingExpandWildcards int

const (
	// PutMappingExpandWildcardsOpen can be used to set PutMappingExpandWildcards to "open"
	PutMappingExpandWildcardsOpen = iota
	// PutMappingExpandWildcardsClosed can be used to set PutMappingExpandWildcards to "closed"
	PutMappingExpandWildcardsClosed = iota
	// PutMappingExpandWildcardsNone can be used to set PutMappingExpandWildcards to "none"
	PutMappingExpandWildcardsNone = iota
	// PutMappingExpandWildcardsAll can be used to set PutMappingExpandWildcards to "all"
	PutMappingExpandWildcardsAll = iota
)

// WithPutMappingExpandWildcards - whether to expand wildcard expression to concrete indices that are open, closed or both.
func WithPutMappingExpandWildcards(expandWildcards PutMappingExpandWildcards) PutMappingOption {
	return func(r *transport.Request) {
	}
}

// WithPutMappingIgnoreUnavailable - whether specified concrete indices should be ignored when unavailable (missing or closed).
func WithPutMappingIgnoreUnavailable(ignoreUnavailable bool) PutMappingOption {
	return func(r *transport.Request) {
	}
}

// WithPutMappingMasterTimeout - specify timeout for connection to master.
func WithPutMappingMasterTimeout(masterTimeout time.Duration) PutMappingOption {
	return func(r *transport.Request) {
	}
}

// WithPutMappingTimeout - explicit operation timeout.
func WithPutMappingTimeout(timeout time.Duration) PutMappingOption {
	return func(r *transport.Request) {
	}
}

// WithPutMappingUpdateAllTypes - whether to update the mapping for all fields with the same name across all types or not.
func WithPutMappingUpdateAllTypes(updateAllTypes bool) PutMappingOption {
	return func(r *transport.Request) {
	}
}

// WithPutMappingErrorTrace - include the stack trace of returned errors.
func WithPutMappingErrorTrace(errorTrace bool) PutMappingOption {
	return func(r *transport.Request) {
	}
}

// WithPutMappingFilterPath - a comma-separated list of filters used to reduce the respone.
func WithPutMappingFilterPath(filterPath []string) PutMappingOption {
	return func(r *transport.Request) {
	}
}

// WithPutMappingHuman - return human readable values for statistics.
func WithPutMappingHuman(human bool) PutMappingOption {
	return func(r *transport.Request) {
	}
}

// WithPutMappingIgnore - ignores the specified HTTP status codes.
func WithPutMappingIgnore(ignore []int) PutMappingOption {
	return func(r *transport.Request) {
	}
}

// WithPutMappingPretty - pretty format the returned JSON response.
func WithPutMappingPretty(pretty bool) PutMappingOption {
	return func(r *transport.Request) {
	}
}

// WithPutMappingSourceParam - the URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
func WithPutMappingSourceParam(sourceParam string) PutMappingOption {
	return func(r *transport.Request) {
	}
}

// PutMapping - see https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-put-mapping.html for more info.
//
// documentType: the name of the document type.
//
// body: the mapping definition.
//
// options: optional parameters.
func (i *Indices) PutMapping(documentType string, body map[string]interface{}, options ...PutMappingOption) (*PutMappingResponse, error) {
	req := i.transport.NewRequest("PUT")
	for _, option := range options {
		option(req)
	}
	resp, err := i.transport.Do(req)
	return &PutMappingResponse{resp}, err
}

// PutMappingResponse is the response for PutMapping.
type PutMappingResponse struct {
	Response *http.Response
	// TODO: fill in structured response
}

// DecodeBody decodes the JSON body of the HTTP response.
func (r *PutMappingResponse) DecodeBody() (util.MapStr, error) {
	return transport.DecodeResponseBody(r.Response)
}
